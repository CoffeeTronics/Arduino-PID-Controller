//*************************************************************
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <MAX6675.h>
#include <MenuBackend.h>
#include <PID_v1.h>
#define RelayPin 7

uint8_t degree[8] = {0xc,0x12,0xc,0x0,0x0,0x0,0x0};

int CS0 = 10;         // CS pin on MAX6675
int SO = 11;          // SO pin of MAX6675
int SCK = 12;         // SCK pin of MAX6675
int units = 0;        // Units to readout temp (0 = ÀöF, 1 = ÀöC)
float error = -20.0;  // Temperature compensation error
float temp_out = 0.0; // Temperature output varible

MAX6675 temp0(CS0, SO, SCK, units, error);

LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display
//Define Variables we'll be connecting to
double Setpoint, Input, Output;

int intSetpoint = 0;  //variable for displaying S: as an integer
int intTemp = 0;      // variable for displaying PV as an integer
float Kp = 0.0;
float Ki = 0.0;
float Kd = 0.0;

//Specify the links and initial tuning parameters
PID myPID( & Input, &Output, &Setpoint, 400, 30, 10, DIRECT);

int WindowSize = 5000;
unsigned long windowStartTime;

const int buttonPinLeft = 4;   // pin for the Up button
const int buttonPinRight = 5;  // pin for the Down button
const int buttonPinEsc = 3;    // pin for the Esc button
const int buttonPinEnter = 2;  // pin for the Enter button
int lastButtonPushed = 0;

int lastButtonEnterState = LOW; // the previous reading from the Enter input pin
int lastButtonEscState = LOW;   // the previous reading from the Esc input pin
int lastButtonLeftState = LOW;  // the previous reading from the Left input pin
int lastButtonRightState = LOW; // the previous reading from the Right input pin
long lastEnterDebounceTime = 0; // the last time the output pin was toggled
long lastEscDebounceTime = 0;   // the last time the output pin was toggled
long lastLeftDebounceTime = 0;  // the last time the output pin was toggled
long lastRightDebounceTime = 0; // the last time the output pin was toggled
long debounceDelay = 300;       // the debounce time
//Menu variables
MenuBackend menu = MenuBackend(menuUsed, menuChanged);
//initialize menuitems
MenuItem menu1Item1 = MenuItem("SetPoint");

MenuItem menuItem1SubItem1 = MenuItem("B220");
MenuItem menuItem1SubItem2 = MenuItem("B221");
MenuItem menuItem1SubItem3 = MenuItem("B222");
MenuItem menuItem1SubItem4 = MenuItem("B223");
MenuItem menuItem1SubItem5 = MenuItem("B224");
MenuItem menuItem1SubItem6 = MenuItem("B225");
MenuItem menuItem1SubItem7 = MenuItem("B226");
MenuItem menuItem1SubItem8 = MenuItem("B227");
MenuItem menuItem1SubItem9 = MenuItem("B228");
MenuItem menuItem1SubItem10 = MenuItem("B229");
MenuItem menuItem1SubItem11 = MenuItem("B230");
MenuItem menuItem1SubItem12 = MenuItem("B231");
MenuItem menuItem1SubItem13 = MenuItem("B232");
MenuItem menuItem1SubItem14 = MenuItem("B233");
MenuItem menuItem1SubItem15 = MenuItem("B234");
MenuItem menuItem1SubItem16 = MenuItem("B235");
MenuItem menuItem1SubItem17 = MenuItem("B236");
MenuItem menuItem1SubItem18 = MenuItem("B237");
MenuItem menuItem1SubItem19 = MenuItem("B238");
MenuItem menuItem1SubItem20 = MenuItem("B239");
MenuItem menuItem1SubItem21 = MenuItem("B240");
MenuItem menu1Item2 = MenuItem("Steam");
MenuItem menuItem2SubItem1 = MenuItem("S285");
MenuItem menuItem2SubItem2 = MenuItem("S290");
MenuItem menuItem2SubItem3 = MenuItem("S295");
MenuItem menuItem2SubItem4 = MenuItem("S300");
MenuItem menu1Item3 = MenuItem("Set P");
MenuItem menuItem3SubItem1 = MenuItem("P1");
MenuItem menuItem3SubItem2 = MenuItem("P2");
MenuItem menuItem3SubItem3 = MenuItem("P3");
MenuItem menuItem3SubItem4 = MenuItem("P4");
MenuItem menuItem3SubItem5 = MenuItem("P5");
MenuItem menuItem3SubItem6 = MenuItem("P6");
MenuItem menuItem3SubItem7 = MenuItem("P7");
MenuItem menuItem3SubItem8 = MenuItem("P8");
MenuItem menuItem3SubItem9 = MenuItem("P9");
MenuItem menuItem3SubItem10 = MenuItem("P10");
MenuItem menu1Item4 = MenuItem("Set I");
MenuItem menuItem4SubItem1 = MenuItem("I1");
MenuItem menuItem4SubItem2 = MenuItem("I2");
MenuItem menuItem4SubItem3 = MenuItem("I3");
MenuItem menuItem4SubItem4 = MenuItem("I4");
MenuItem menuItem4SubItem5 = MenuItem("I5");
MenuItem menuItem4SubItem6 = MenuItem("I6");
MenuItem menuItem4SubItem7 = MenuItem("I7");
MenuItem menuItem4SubItem8 = MenuItem("I8");
MenuItem menuItem4SubItem9 = MenuItem("I9");
MenuItem menuItem4SubItem10 = MenuItem("I10");
MenuItem menu1Item5 = MenuItem("Set D");
MenuItem menuItem5SubItem1 = MenuItem("D1");
MenuItem menuItem5SubItem2 = MenuItem("D2");
MenuItem menuItem5SubItem3 = MenuItem("D3");
MenuItem menuItem5SubItem4 = MenuItem("D4");
MenuItem menuItem5SubItem5 = MenuItem("D5");
MenuItem menuItem5SubItem6 = MenuItem("D6");
MenuItem menuItem5SubItem7 = MenuItem("D7");
MenuItem menuItem5SubItem8 = MenuItem("D8");
MenuItem menuItem5SubItem9 = MenuItem("D9");
MenuItem menuItem5SubItem10 = MenuItem("D10");


void setup() {
    Serial.begin(9600);
    lcd.init();   // initialize the lcd
    lcd.backlight();
    lcd.createChar(0, degree);
    lcd.setCursor(0, 0);
    // Initial splash screen
    delay(500);
    lcd.print("Arduino ");
    delay(500);
    lcd.print("P");
    delay(500);
    lcd.print("I");
    delay(500);
    lcd.print("D");
    delay(500);
    lcd.setCursor(2, 1);
    lcd.print("for espresso");
    delay(3000);
    lcd.clear();

    pinMode(buttonPinLeft, INPUT);
    pinMode(buttonPinRight, INPUT);
    pinMode(buttonPinEnter, INPUT);
    pinMode(buttonPinEsc, INPUT);

    windowStartTime = millis(); //initialize the variables we're linked to
    Setpoint = 228;
    Kp = 0.0;
    Ki = 0.0;
    Kd = 0.0;

    //tell the PID to range between 0 and the full window size
    myPID.SetOutputLimits(0, WindowSize);
    //turn the PID on
    myPID.SetMode(AUTOMATIC);

    //configure menu
    menu.getRoot().add(menu1Item1);
    menu1Item1.addRight(menu1Item2).addRight(menu1Item3).addRight(menu1Item4).addRight(menu1Item5);
    menu1Item1.add(menuItem1SubItem1).addRight(menuItem1SubItem2).addRight(menuItem1SubItem3).addRight(menuItem1SubItem4).addRight(menuItem1SubItem5).addRight(menuItem1SubItem6).addRight(menuItem1SubItem7).addRight(menuItem1SubItem8).addRight(menuItem1SubItem9).addRight(menuItem1SubItem10).addRight(menuItem1SubItem11).addRight(menuItem1SubItem12).addRight(menuItem1SubItem13).addRight(menuItem1SubItem14).addRight(menuItem1SubItem15).addRight(menuItem1SubItem16).addRight(menuItem1SubItem17).addRight(menuItem1SubItem18).addRight(menuItem1SubItem19).addRight(menuItem1SubItem20).addRight(menuItem1SubItem21);
    //.addRight(menuItem1SubItem22).addRight(menuItem1SubItem23).addRight(menuItem1SubItem24).addRight(menuItem1SubItem25).addRight(menuItem1SubItem26).addRight(menuItem1SubItem27).addRight(menuItem1SubItem28).addRight(menuItem1SubItem29).addRight(menuItem1SubItem30).addRight(menuItem1SubItem31);//.addRight(menuItem1SubItem32).addRight(menuItem1SubItem33).addRight(menuItem1SubItem34).addRight(menuItem1SubItem35).addRight(menuItem1SubItem36).addRight(menuItem1SubItem37).addRight(menuItem1SubItem38).addRight(menuItem1SubItem39).addRight(menuItem1SubItem40).addRight(menuItem1SubItem41).addRight(menuItem1SubItem42).addRight(menuItem1SubItem43).addRight(menuItem1SubItem44).addRight(menuItem1SubItem45).addRight(menuItem1SubItem46);
    menu1Item2.add(menuItem2SubItem1).addRight(menuItem2SubItem2).addRight(menuItem2SubItem3).addRight(menuItem2SubItem4);
    //.addRight(menuItem2SubItem5).addRight(menuItem2SubItem6); //.addRight(menuItem3SubItem3);
    menu1Item3.add(menuItem3SubItem1).addRight(menuItem3SubItem2).addRight(menuItem3SubItem3).addRight(menuItem3SubItem4).addRight(menuItem3SubItem5).addRight(menuItem3SubItem6).addRight(menuItem3SubItem7).addRight(menuItem3SubItem8).addRight(menuItem3SubItem9).addRight(menuItem3SubItem10);
    //.addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2).addRight(menuItem3SubItem2);
    menu1Item4.add(menuItem4SubItem1).addRight(menuItem4SubItem2).addRight(menuItem4SubItem3).addRight(menuItem4SubItem4).addRight(menuItem4SubItem5).addRight(menuItem4SubItem6).addRight(menuItem4SubItem7).addRight(menuItem4SubItem8).addRight(menuItem4SubItem9).addRight(menuItem4SubItem10);
    menu1Item5.add(menuItem5SubItem1).addRight(menuItem5SubItem2).addRight(menuItem5SubItem3).addRight(menuItem5SubItem4).addRight(menuItem5SubItem5).addRight(menuItem5SubItem6).addRight(menuItem5SubItem7).addRight(menuItem5SubItem8).addRight(menuItem5SubItem9).addRight(menuItem5SubItem10);

    menu.toRoot();
    lcd.setCursor(0, 0);
    lcd.print("S:");
    lcd.setCursor(2, 0);
    intSetpoint = Setpoint * 1;
    lcd.print(intSetpoint);
    lcd.print(0, BYTE);

}
//end setup
void loop() {
    temp_out = temp0.read_temp(5);    // Read the temp 20 times and return the average value to the var
    Serial.println(temp_out);         // Print the temperature to Serial
    //lcd.clear();
    lcd.setCursor(8, 0);
    // Printing the PV, or
    lcd.print("P:");      // Process Variable. This is
    lcd.setCursor(10, 0); // the measured value of temp.
    intTemp = temp_out;   // convert display variable to integer
    lcd.print(intTemp);   // print display variable
    lcd.print(0, BYTE);
    delay(1000);          // Wait one second
    Input = temp_out;     // PID input is measured averaged temp
    myPID.Compute();      // PID calculation
    /************************************************
    * turn the output pin on/off based on pid output
    ************************************************/
    unsigned long now = millis();
    if (now - windowStartTime > WindowSize)
    {
        //time to shift the Relay Window
        windowStartTime += WindowSize;
    }
    if (Output > now - windowStartTime) digitalWrite(RelayPin, HIGH);
    else digitalWrite(RelayPin, LOW);

    readButtons();    //I split button reading and navigation in two procedures because
    navigateMenus();  //in some situations I want to use the button for other purpose (eg. to change some settings)
}
// end loop
void menuChanged(MenuChangeEvent changed) {
    MenuItem newMenuItem = changed.to;
    char* newMenuItemName = const_cast<char *>(newMenuItem.getName());
    int newSetting = 0;
    
    //get the destination menu
    lcd.setCursor(0, 1);
    
    //set the start position for lcd printing to the second row
    if(newMenuItemName == menu.getRoot().getName()){
      lcd.print("Menu            ");
    } else if(newMenuItemName == "SetPoint"){
      lcd.print("Brew Temp   "); 
    } else if(newMenuItemName == "Steam"){
      lcd.print("Steam Temp  "); 
    } else if(newMenuItemName == "Set P"){
      setPidValues(newMenuItemName, myPID.GetKp());
    } else if(newMenuItemName == "Set I"){
      setPidValues(newMenuItemName, myPID.GetKi());
    } else if(newMenuItemName == "Set D"){
      setPidValues(newMenuItemName, myPID.GetKd());
    } else {
      char action = newMenuItemName[0];
      newMenuItemName[0] = '+';
      newSetting = atol(newMenuItemName);
    
      if((action == 'B') || (action == 'S')) { // we're setting the brew OR steam temp
        changeBrewTemperature(newSetting);
      } else if(action == 'P') { // we're setting the Proportional value
        // P is set to 10 times the entered value
        setProportionalOfPID(newSetting * 10);
      } else if(action == 'I') { // we're setting the Intergral value
        // I is set to 5 times the entered value
        setIntegralOfPID(newSetting * 5);
      } else if(action == 'D') { // we're setting the Derivitave value
        // D is set to twice the value entered
        setDerivativeOfPID(newSetting * 2);
      }
   }
}

void setPidValues(char* menuName, double val) {
  printingSV();
  lcd.setCursor(0,1);
  lcd.print(menuName); 
  lcd.setCursor(6,1);
  int whole = (int)val;
  double fraction = val-(double)whole;
  int twodecplaces = (int)(100*fraction);
  lcd.print(whole);
}

void changeBrewTemperature(int newSetPoint) {
  Setpoint = newSetPoint;
  printingSV();
}

// For now, there's no separate setting for steam or brew so these functions are the same
void changeSteamTemperature(int newSetPoint) {
  changeBrewTemperature(newSetPoint);
}

void setProportionalOfPID(int newP) {
  Kp = newP;  
  myPID.SetTunings(Kp,Ki,Kd);
  printingSV();
  lcd.setCursor(10,1);
  lcd.print("P= ");
  lcd.print(Kp);
}

void setIntegralOfPID(int newI) {
  Ki = newI;  
  myPID.SetTunings(Kp,Ki,Kd);
  printingSV();
  lcd.setCursor(10,1);
  lcd.print("I= ");
  lcd.print(Ki);
}

void setDerivativeOfPID(int newD) {
  Kd = newD;  
  myPID.SetTunings(Kp,Ki,Kd);
  printingSV();
  lcd.setCursor(10,1);
  lcd.print("D= ");
  lcd.print(Kd);
}

void menuUsed(MenuUseEvent used) {
    menu.toRoot();
}

void readButtons() {
    //read buttons status
    int reading;
    int buttonEnterState = LOW;    // the current reading from the Enter input pin
    int buttonEscState = LOW;      // the current reading from the input pin
    int buttonLeftState = LOW;     // the current reading from the input pin
    int buttonRightState = LOW;    // the current reading from the input pin
    //Enter button
    // read the state of the switch into a local variable:
    reading = digitalRead(buttonPinEnter);

    // check to see if you just pressed the enter button
    // (i.e. the input went from LOW to HIGH), and you've waited
    // long enough since the last press to ignore any noise:
    // If the switch changed, due to noise or pressing:
    if (reading != lastButtonEnterState) {
        // reset the debouncing timer
        lastEnterDebounceTime = millis();
    }

    if ((millis() - lastEnterDebounceTime) > debounceDelay) {
        // whatever the reading is at, it's been there for longer
        // than the debounce delay, so take it as the actual current state:
        buttonEnterState = reading;
        lastEnterDebounceTime = millis();
    }

    // save the reading. Next time through the loop,
    // it'll be the lastButtonState:
    lastButtonEnterState = reading;


    //Esc button
    // read the state of the switch into a local variable:
    reading = digitalRead(buttonPinEsc);

    // check to see if you just pressed the Down button
    // (i.e. the input went from LOW to HIGH), and you've waited
    // long enough since the last press to ignore any noise:
    // If the switch changed, due to noise or pressing:
    if (reading != lastButtonEscState) {
        // reset the debouncing timer
        lastEscDebounceTime = millis();
    }

    if ((millis() - lastEscDebounceTime) > debounceDelay) {
        // whatever the reading is at, it's been there for longer
        // than the debounce delay, so take it as the actual current state:
        buttonEscState = reading;
        lastEscDebounceTime = millis();
    }

    // save the reading. Next time through the loop,
    // it'll be the lastButtonState:
    lastButtonEscState = reading;


    //Down button
    // read the state of the switch into a local variable:
    reading = digitalRead(buttonPinRight);

    // check to see if you just pressed the Down button
    // (i.e. the input went from LOW to HIGH), and you've waited
    // long enough since the last press to ignore any noise:
    // If the switch changed, due to noise or pressing:
    if (reading != lastButtonRightState) {
        // reset the debouncing timer
        lastRightDebounceTime = millis();
    }

    if ((millis() - lastRightDebounceTime) > debounceDelay) {
        // whatever the reading is at, it's been there for longer
        // than the debounce delay, so take it as the actual current state:
        buttonRightState = reading;
        lastRightDebounceTime = millis();
    }

    // save the reading. Next time through the loop,
    // it'll be the lastButtonState:
    lastButtonRightState = reading;


    //Up button
    // read the state of the switch into a local variable:
    reading = digitalRead(buttonPinLeft);

    // check to see if you just pressed the Down button
    // (i.e. the input went from LOW to HIGH), and you've waited
    // long enough since the last press to ignore any noise:
    // If the switch changed, due to noise or pressing:
    if (reading != lastButtonLeftState) {
        // reset the debouncing timer
        lastLeftDebounceTime = millis();
    }

    if ((millis() - lastLeftDebounceTime) > debounceDelay) {
        // whatever the reading is at, it's been there for longer
        // than the debounce delay, so take it as the actual current state:
        buttonLeftState = reading;
        lastLeftDebounceTime = millis();
    }

    // save the reading. Next time through the loop,
    // it'll be the lastButtonState:
    lastButtonLeftState = reading;

    //records which button has been pressed
    if (buttonEnterState == HIGH) {
        lastButtonPushed = buttonPinEnter;

    } else if (buttonEscState == HIGH) {
        lastButtonPushed = buttonPinEsc;

    } else if (buttonRightState == HIGH) {
        lastButtonPushed = buttonPinRight;

    } else if (buttonLeftState == HIGH) {
        lastButtonPushed = buttonPinLeft;

    } else {
        lastButtonPushed = 0;
    }
}

void navigateMenus() {
    MenuItem currentMenu = menu.getCurrent();

    switch (lastButtonPushed) {
    case buttonPinEnter:
        if (! (currentMenu.moveDown())) { // if the current menu has a child and has been pressed enter then menu navigate to item below
            menu.use();
        } else {                          // otherwise, if menu has no child and has been pressed enter the current menu is used
            menu.moveDown();
        }
        break;
    case buttonPinEsc:
        menu.toRoot();
        //back to main
        break;
    case buttonPinRight:
        menu.moveRight();
        break;
    case buttonPinLeft:
        menu.moveLeft();
        break;
    }

    lastButtonPushed = 0;
    //reset the lastButtonPushed variable
}

void printingSV() {
    //for printing the SetValue as the menu is being traversed
    lcd.clear();
    lcd.print("S:");
    intSetpoint = Setpoint * 1;
    lcd.print(intSetpoint);
    lcd.print(0, BYTE);
}
